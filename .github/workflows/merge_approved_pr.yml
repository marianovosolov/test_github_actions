name: Auto Merge Verified PRs

on:
  schedule:
    - cron: '*/1 * * * *'  # Every 1 minute
  workflow_dispatch:

env:
  VERSION_LABEL: v1.0.0
  VERSION_BRANCH: developer
  REQUIRED_LABEL: approved

jobs:
  auto-merge-prs:
    runs-on: ubuntu-latest

    steps:
      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y gh jq

      - name: Fetch all open PRs
        id: list-prs
        run: |
          prs=$(gh pr list --state open --json number --jq '.[] | .number')
          echo "prs<<EOF" >> $GITHUB_OUTPUT
          echo "$prs" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Process PRs
        run: |
          for pr in ${{ steps.list-prs.outputs.prs }}; do
            echo "üîç Checking PR #$pr..."

            base_branch=$(gh pr view $pr --json baseRefName --jq '.baseRefName')
            labels=$(gh pr view $pr --json labels --jq '.labels[].name')
            approved=$(gh pr view $pr --json reviewDecision --jq '.reviewDecision')
            resolved=$(gh pr view $pr --json reviewThreads --jq '[.reviewThreads[] | select(.isResolved == false)] | length == 0')
            mergeable=$(gh pr view $pr --json mergeable --jq '.mergeable')
            checks_passed=$(gh pr checks $pr --exit-status >/dev/null 2>&1 && echo true || echo false)

            echo "Base: $base_branch"
            echo "Labels: $labels"
            echo "Approved: $approved"
            echo "Resolved: $resolved"
            echo "Mergeable: $mergeable"
            echo "Checks Passed: $checks_passed"

            # Filter logic
            if [[ "$base_branch" != "$VERSION_BRANCH" ]]; then
              echo "‚è© Skipping: wrong base branch"
              continue
            fi

            if ! echo "$labels" | grep -q "$VERSION_LABEL"; then
              echo "‚è© Skipping: missing version label"
              continue
            fi

            if ! echo "$labels" | grep -q "$REQUIRED_LABEL"; then
              echo "‚è© Skipping: missing ready-to-merge label"
              continue
            fi

            if [[ "$approved" != "APPROVED" ]]; then
              echo "‚è© Skipping: not approved"
              continue
            fi

            if [[ "$resolved" != "true" ]]; then
              echo "‚è© Skipping: unresolved threads"
              continue
            fi

            if [[ "$checks_passed" != "true" ]]; then
              echo "‚è© Skipping: CI failed or pending"
              continue
            fi

            echo "‚úÖ PR #$pr meets all criteria. Attempting update..."

            gh pr checkout $pr
            git fetch origin $VERSION_BRANCH

            if ! git merge origin/$VERSION_BRANCH --no-edit; then
              echo "‚ùå Merge conflict detected. Skipping PR #$pr"
              continue
            fi

            git push origin HEAD

            echo "üîÄ Attempting to merge PR #$pr..."
            gh pr merge $pr --merge --delete-branch
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
